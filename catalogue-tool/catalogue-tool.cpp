#include <iostream>
#include <fstream>
#include <string>

#include "../inc/constellation.h"
#include "henry_draper.h"

using namespace std;

#pragma pack(1)
struct CTHenryDraperEntry
{
	char identifier[20];
	double ra;
	double dec;
	float gal_long;
	float gal_lat;
	uint16_t classification;
	char spectral_class[4];
	float vis_mag;
	float phot_mag;
	uint32_t hd_ident;
	double dircos1;
	double dircos2;
	double dircos3;
	uint16_t variability;
	uint16_t multiplicity;

	uint8_t fill[10];
};

struct CTHenryDraperHeader
{
	uint32_t rows;
	uint32_t something;
	uint32_t rows_plus_one;
	char date[12];

	uint8_t fill[76];
};

int main()
{
	ofstream generated_file("../inc/constellation_data.generated.h");

	generated_file << "// this file was generated by the origami-sunset star catalog analyis tool." << endl;

	readTDat_HD("../catalog/heasarc_hd.tdat");

	/*ifstream hd_dat_file("../catalog/hddb.dat", ios::binary | ios::ate);
	if (!hd_dat_file.is_open())
	{
		generated_file.close();
		cout << "unable to read HD catalog";
		return 1;
	}

	streamsize hd_size = hd_dat_file.tellg();
	hd_dat_file.seekg(ios::beg);
	char* hd_data = new char[hd_size];
	hd_dat_file.read(hd_data, hd_size);

	CTHenryDraperHeader* header = (CTHenryDraperHeader*)hd_data;

	CTHenryDraperEntry* entry = (CTHenryDraperEntry*)(header + 1);
	for (size_t i = 0; i < header->rows; i++, entry++)
	{
		cout << "header for HD" << entry->hd_ident << endl;
		cout << "RA " << entry->ra << endl;
		cout << "DEC " << entry->dec << endl;
	}*/

	generated_file.close();

	return 0;
}
