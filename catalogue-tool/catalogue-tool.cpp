#include <iostream>
#include <fstream>
#include <string>

#include "../inc/constellation.h"
#include "henry_draper.h"
#include "hipparcos.h"
#include "messier.h"
#include "ngc2000.h"
#include "constel.h"

using namespace std;

#pragma pack(1)

int main()
{
	ofstream generated_file("../inc/constellation_data.generated.h");

	generated_file << "// this file was generated by the origami-sunset star catalog analyis tool." << endl;

	//auto hd_data = readTDat_HD("../catalog/heasarc_hd.tdat");
	//auto hip_data = readTDat_HIP("../catalog/heasarc_hipparcos.tdat");
	//auto mes_data = readTDat_Mes("../catalog/heasarc_messier.tdat");
	auto ngc_data = readTDat_NGC("../catalog/heasarc_ngc2000.tdat");

	auto boundary_data = readBounds("../catalog/bound_in_20.txt");
	auto center_data = readCenters("../catalog/centers_20.txt");
	center_data.erase("SER");
	// TODO: restructure the constellation data, including fixing up serpens

	/*for (const CTHDEntry& entry : hd_data)
	{
		if (entry.hd_number == 6860 || entry.hd_number == 13161)
		{
			bool res = testStarInConstellation({ entry.ra, entry.dec }, center_data["AND"], boundary_data["AND"]);
			continue;
		}
	}*/

	size_t failures = 0;
	for (const CTNGCEntry& entry : ngc_data)
	{
		string constel = "NON";
		for (const auto& pair : boundary_data)
		{
			if (testStarInConstellation({ entry.ra * (24.0f / 360.0f), entry.dec}, center_data[pair.first], pair.second))
			{
				constel = pair.first;
				if (constel == "SER1" || constel == "SER2")
					constel = "SER";
			}
		}
		string real_constel = entry.constellation;
		for (auto& c : real_constel) c = toupper(c);

		if (constel != real_constel)
			failures++;
			//std::cout << "fail!" << std::endl;
	}
	
	generated_file.close();

	return 0;
}
